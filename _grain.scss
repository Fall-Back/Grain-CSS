/*! Grain-CSS. See SCSS file for documentation. */
/*
    Designed for use with the M3 [CSS Mustard Cut](https://github.com/Fall-Back/CSS-Mustard-Cut)
    IE 10, 11
    Edge
    Chrome 29+, Opera 16+, Safari 6.1+, iOS 7+, Android ~4.4+
    FF29+ 

    Notes:

    Already undecided about support level. M3 cut probably most realistic, and flexbox works, but
    Start-CSS is meant for earlier version so it sort of seems a bit wierd to not have the same
    support?

*/

/*------------------------------------------------------------------------------------------------*\

   FUNCTIONS AND CONSTRUCTION MIXINS
   (These must come before the Setting, as the settings make use of some of these)

\*------------------------------------------------------------------------------------------------*/

//@debug ($fallback--base-rem-space-unit / 8) - ((($input-border-width + 0px) / 1px) * $fallback--base-rem-1px);
/*@function calc-rem-from-px($px, $negative: false) {
}*/
/*@mixin mq($query) {
}*/


/*------------------------------------------------------------------------------------------------*\

    SETTINGS

\*------------------------------------------------------------------------------------------------*/
$namespace: '' !default;

$spacing-units: (
  xxs: 0.1875rem,
  xs: 0.375rem,
  s: 0.75rem,
  m: 1.5rem,
  l: 3rem,
  xl: 6rem,
  xxl: 12rem
) !default;


/*------------------------------------------------------------------------------------------------*\

    GRAIN MIXINS

\*------------------------------------------------------------------------------------------------*/


@mixin flex-container() {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    
    // IE has different defaults:
    & > * {
        -ms-flex: 0 1 auto;
    }
}

@mixin flex-container--column() {
    -webkit-flex-direction: column;
        -ms-flex-direction: column;
            flex-direction: column;
}


@mixin flex-container--wrap() {
    -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
            flex-wrap: wrap;
}

@mixin flex-container--wrap-reverse() {
    -webkit-flex-wrap: wrap-reverse;
        -ms-flex-wrap: wrap-reverse;
            flex-wrap: wrap-reverse;
}


@mixin margin($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    margin: $spacing-unit;
}

@mixin margin-t($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    margin-top: $spacing-unit;
}

@mixin margin-r($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    margin-right: $spacing-unit;
}

@mixin margin-b($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    margin-bottom: $spacing-unit;
}

@mixin margin-l($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    margin-left: $spacing-unit;
}

@mixin margin-h($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    margin-left: $spacing-unit;
    margin-right: $spacing-unit;
}

@mixin margin-v($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    margin-top: $spacing-unit;
    margin-bottom: $spacing-unit;
}




@mixin padding($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    padding: $spacing-unit;
}

@mixin padding-t($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    padding-top: $spacing-unit;
}

@mixin padding-r($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    padding-right: $spacing-unit;
}

@mixin padding-b($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    padding-bottom: $spacing-unit;
}

@mixin padding-l($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    padding-left: $spacing-unit;
}

@mixin padding-h($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    padding-left: $spacing-unit;
    padding-right: $spacing-unit;
}

@mixin padding-v($spacing-unit) {
    // Lookup spacing-units key:
    @if map-has-key($spacing-units, $spacing-unit) {
        $spacing-unit: map-get($spacing-units, $spacing-unit);
    }
    
    padding-top: $spacing-unit;
    padding-bottom: $spacing-unit;
}



/*! End Grain-CSS */